from models import *
import numpy as np
from sklearn import preprocessing, feature_selection

games = Game.games_after_with_filter(5, rank_systems=("RPI", "SAG", "POM", "MOR",))
print "%s games returned" % len(games)

data = np.array([g.attributes() for g in games], dtype=np.float)
labels = np.array([g.upset() for g in games])

non_nan_indices = ~np.isnan(data).any(axis=1)
data = data[non_nan_indices]
labels = labels[non_nan_indices]

print "%s usable games returned" % len(data)

f_values, p_values = feature_selection.f_classif(data, labels)

features = [
	"get_rank('RPI').num",
	"get_rank('SAG').num",
	"get_rank('POM').num",
	"get_rank('MOR').num",
	"fg_mean",
	"fg_min",
	"fg_max",
	"fg_variance",
	"o_fg_mean",
	"o_fg_min",
	"o_fg_max",
	"o_fg_variance",
	"fg_a_mean",
	"fg_a_min",
	"fg_a_max",
	"fg_a_variance",
	"o_fg_a_mean",
	"o_fg_a_min",
	"o_fg_a_max",
	"o_fg_a_variance",
	"three_fg_mean",
	"three_fg_min",
	"three_fg_max",
	"three_fg_variance",
	"o_three_fg_mean",
	"o_three_fg_min",
	"o_three_fg_max",
	"o_three_fg_variance",
	"three_fg_a_mean",
	"three_fg_a_min",
	"three_fg_a_max",
	"three_fg_a_variance",
	"o_three_fg_a_mean",
	"o_three_fg_a_min",
	"o_three_fg_a_max",
	"o_three_fg_a_variance",
	"ft_mean",
	"ft_min",
	"ft_max",
	"ft_variance",
	"o_ft_mean",
	"o_ft_min",
	"o_ft_max",
	"o_ft_variance",
	"ft_a_mean",
	"ft_a_min",
	"ft_a_max",
	"ft_a_variance",
	"o_ft_a_mean",
	"o_ft_a_min",
	"o_ft_a_max",
	"o_ft_a_variance",
	"pts_mean",
	"pts_min",
	"pts_max",
	"pts_variance",
	"o_pts_mean",
	"o_pts_min",
	"o_pts_max",
	"o_pts_variance",
	"off_reb_mean",
	"off_reb_min",
	"off_reb_max",
	"off_reb_variance",
	"o_off_reb_mean",
	"o_off_reb_min",
	"o_off_reb_max",
	"o_off_reb_variance",
	"def_reb_mean",
	"def_reb_min",
	"def_reb_max",
	"def_reb_variance",
	"o_def_reb_mean",
	"o_def_reb_min",
	"o_def_reb_max",
	"o_def_reb_variance",
	"reb_mean",
	"reb_min",
	"reb_max",
	"reb_variance",
	"o_reb_mean",
	"o_reb_min",
	"o_reb_max",
	"o_reb_variance",
	"ast_mean",
	"ast_min",
	"ast_max",
	"ast_variance",
	"o_ast_mean",
	"o_ast_min",
	"o_ast_max",
	"o_ast_variance",
	"turnovers_mean",
	"turnovers_min",
	"turnovers_max",
	"turnovers_variance",
	"o_turnovers_mean",
	"o_turnovers_min",
	"o_turnovers_max",
	"o_turnovers_variance",
	"steals_mean",
	"steals_min",
	"steals_max",
	"steals_variance",
	"o_steals_mean",
	"o_steals_min",
	"o_steals_max",
	"o_steals_variance",
	"blocks_mean",
	"blocks_min",
	"blocks_max",
	"blocks_variance",
	"o_blocks_mean",
	"o_blocks_min",
	"o_blocks_max",
	"o_blocks_variance",
	"fouls_mean",
	"fouls_min",
	"fouls_max",
	"fouls_variance",
	"o_fouls_mean",
	"o_fouls_min",
	"o_fouls_max",
	"o_fouls_variance"
]

annotated = zip(features, f_values)
sorted_annotated = sorted(annotated, key=lambda x: x[1])

for (feature, f_value) in sorted_annotated:
	print "%s: %s" % (feature, f_value)